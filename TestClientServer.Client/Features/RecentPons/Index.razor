@page "/RecentPons"
@using System.Text.Json
@using TestClientServer.Shared.Models.Server
@layout MainLayout
@inject HttpClient Http

<div class="mt-3 flex-container">
    <a href="/PonLight" class="btn btn-primary">Return Home</a>
    <button class="btn btn-success" @onclick="() => _showModal = true">Edit Look Back</button>
</div>
<div class="mt-3 flex-container1">
    <h3 class="header">Recent PON Tag Entries</h3>
</div>
<div class="mt-3 flex-container1">
    <h4 class="header">@CalculatedDateRange(_selectedTimeframe, DateTime.Now).ToString("d") - @DateTime.Now.ToString("d")</h4>
</div>

@if (_showModal)
{
<div class="modal-backdrop"></div>
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Select Look Back Days</h5>
        </div>
        <div class="modal-body">
            <select @bind="_selectedTimeframe" class="form-control">
                @foreach (var timeframe in _timeframes)
                {
                <option value="@timeframe">@timeframe</option>
                }
            </select>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-primary" @onclick="OnTimeframeSelected">Submit</button>
        </div>
    </div>
</div>
}

@if (_isLoading)
{
    <br/>
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <p class="text-danger">@_errorMessage</p>
}
else if (_equipmentRecords.Count == 0)
{
    <p>No records found.</p>
}
else
{
    <div class="table-wrapper">
        <div class="table-container">
            <table class="table">
                <thead>
                <tr>
                    <th>Created Date</th>
                    <th>FDH</th>
                    <th>Card</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var equipment in _equipmentRecords.Where(e => e.EquClass == "F-FDH").OrderByDescending(e => e.CreatedDate))
                {
                    <tr>
                        <td>@equipment.CreatedDate.ToString()</td>
                        <td>@equipment.Fdh</td>
                        <td>@equipment.SplitterCard</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="table-container">
            <table class="table">
                <thead>
                <tr>
                    <th>OLT</th>
                    <th>LT</th>
                    <th>PON</th>
                    <th>Town</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var equipment in _equipmentRecords.Where(e => e.EquClass == "F-OLT").OrderByDescending(e => e.CreatedDate))
                {
                    <tr>
                        <td>@equipment.Olt</td>
                        <td>@equipment.Lt</td>
                        <td>@equipment.Pon</td>
                        <td>@equipment.Town</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private int _selectedTimeframe = 3;  // Default to 3 day
    private readonly List<int> _timeframes = Enumerable.Range(1, 30).ToList();
    private List<WcfMgmtEquipment> _equipmentRecords = new();
    private bool _showModal = false;
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;
    private DateTime _today = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipmentRecords();
    }

    private async Task OnTimeframeSelected()
    {
        _showModal = false;
        await LoadEquipmentRecords();
    }

    private async Task LoadEquipmentRecords()
    {
        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            var url = $"formdata/GetRecentPons?selectedTimeFrame={_selectedTimeframe}";
            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                _equipmentRecords = JsonSerializer.Deserialize<List<WcfMgmtEquipment>>(content,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<WcfMgmtEquipment>();
            }
            else
            {
                _errorMessage = $"Error: {response.StatusCode} - {response.ReasonPhrase}";
                _equipmentRecords = new List<WcfMgmtEquipment>();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _equipmentRecords = new List<WcfMgmtEquipment>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private DateTime CalculatedDateRange(int timeFrame, DateTime today)
    {
        var startDate = DateTime.Now.AddDays(-timeFrame);
        return startDate;
    }
}

<style>
    .flex-container {
        display: flex;
        justify-content: space-between;  
    }
    .flex-container1 {
        display: flex;
        justify-content: center; /* Centers horizontally */
        align-items: center; /* Centers vertically */
    }
    .table-wrapper {
        display: flex;
        justify-content: center;  /* Centers horizontally */
    }
    .table-container {
        width: 75%;

    }
    .table {
        width: 100%;
        border-collapse: collapse;
    }
    .table th, .table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .table th {
        background-color: #4CAF50;
        color: white;
    }
    .table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    .table tr:hover {
        background-color: #ddd;
    }

    /* Add a dark background with opacity for the modal */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    /* Style the modal container */
    .modal-dialog {
        position: fixed;
        top: 20%;
        left: 55%;
        transform: translate(-50%, -50%);
        z-index: 1050;
    }

    .modal-content {
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        border-bottom: none;
        padding-bottom: 0;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .modal-body {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .modal-body select {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border-radius: 4px;
        border: 1px solid #ccc;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .modal-footer {
        border-top: none;
        padding-top: 0;
        display: flex;
        justify-content: flex-end;
    }

    .modal-footer .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 10px 20px;
        font-size: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header {
        font-weight: lighter;
        margin-bottom: 20px;
    }
</style>
