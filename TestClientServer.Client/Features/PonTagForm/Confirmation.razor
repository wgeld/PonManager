@page "/confirmation"
@using System.Text.Json
@using System.Web
@using TestClientServer.Shared.Models.Server
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager;

<div class="container mt-4">
    <div class="mt-3 flex-container" >
        <a href="/" class="btn btn-primary">Return Home</a>
        <button class="btn btn-danger" @onclick="UndoButtonSubmit">Undo</button>
    </div>
    <br/>
    <div class="alert alert-success">
        <strong>Success!</strong> The equipment information has been successfully created. The created results are below: 
    </div>
    <div class="mt-3">
        <div class="table-container">

            <table class="table">
                <thead>
                <tr>
                    <th>Class</th>
                    <th>ID</th>
                    <th>Equipment ID</th>
                    <th>FDH</th>
                    <th>Card</th>
                    <th>Tail</th>
                    <th>Town</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var equipment in _equipmentRecords)
                {
                    if (equipment?.EquId.StartsWith("F") == true)
                    {
                        <tr>
                            <td>@equipment.EquClass</td>
                            <td>@equipment.Id</td>
                            <td>@equipment.EquId</td>
                            <td>@equipment.Fdh</td>
                            <td>@equipment.SplitterCard</td>
                            <td>@equipment.SplitterTail</td>
                            <td>@equipment.Town</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
            <table class="table">
                <thead>
                <tr>
                    <th>Class</th>
                    <th>ID</th>
                    <th>Equipment ID</th>
                    <th>OLT</th>
                    <th>LT</th>
                    <th>PON</th>
                    <th>ONT</th>
                    <th>Town</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var equipment in _equipmentRecords)
                {
                    if (equipment?.EquId.StartsWith("N") == true)
                    {
                        <tr>
                            <td>@equipment.EquClass</td>
                            <td>@equipment.Id</td>
                            <td>@equipment.EquId</td>
                            <td>@equipment.Olt</td>
                            <td>@equipment.Lt</td>
                            <td>@equipment.Pon</td>
                            <td>@equipment.Ont</td>
                            <td>@equipment.Town</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<WcfMgmtEquipment>? _equipmentRecords = [];

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        var olt = query.Get("olt");
        var lt = query.Get("lt");
        var pon = query.Get("pon");
        var town = query.Get("town");
        var splitter = query.Get("splitter");
        var fsa = query.Get("fdh");

        // Construct the URL with inputs
        var equipUrl = $"formdata/GetPon?olt={olt}&lt={lt}&pon={pon}&town={Uri.EscapeDataString(town)}&fdh={Uri.EscapeDataString(fsa)}&splitterCard={Uri.EscapeDataString(splitter)}";
        var response = await Http.GetAsync(equipUrl);

        if (response.IsSuccessStatusCode)
        {
            _equipmentRecords = await JsonSerializer.DeserializeAsync<List<WcfMgmtEquipment>>(
                await response.Content.ReadAsStreamAsync(),
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            ) ?? new List<WcfMgmtEquipment>();
            _equipmentRecords = _equipmentRecords
                .OrderBy(e => e.SplitterTail)
                .ThenBy(e => e.Ont)
                .ToList();
        }
        else
        {
            //Handle the case if the API request fails
            _equipmentRecords = new List<WcfMgmtEquipment>();
        }
    }

    private async Task UndoButtonSubmit()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        var olt = query.Get("olt");
        var lt = query.Get("lt");
        var pon = query.Get("pon");
        var town = query.Get("town");
        var splitter = query.Get("splitter");
        var fsa = query.Get("fdh");
        
        var equipUrl = $"formdata/DeletePon?olt={olt}&lt={lt}&pon={pon}&town={Uri.EscapeDataString(town)}&fdh={Uri.EscapeDataString(fsa)}&splitterCard={Uri.EscapeDataString(splitter)}";
        var response = await Http.DeleteAsync(equipUrl);

        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            if (responseString.Contains("Undo Successful"))
            {
                NavigationManager.NavigateTo("/UndoConfirmation");
            }
            else
            {
                NavigationManager.NavigateTo("/Error");
            }
        }
        
    }
}
<style>

    .flex-container {
        display: flex;
        justify-content: space-between;  /* Align items on opposite ends */
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1em;
    }
    .table th, .table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .table th {
        background-color: #4CAF50;
        color: white;
    }
    .table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    .table tr:hover {
        background-color: #ddd;
    }
    .table-container {
        display: flex;
        justify-content: space-around;
    }
    .table {
        width: 50%; /* Adjust based on space and content */
        margin: 0 10px; /* Provides spacing between tables */
    }
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
    }
    th, td {
        padding: 8px; /* Padding for readability */
        text-align: left; /* Align text to the left within cells */
    }
</style>